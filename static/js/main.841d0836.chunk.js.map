{"version":3,"sources":["constants/index.js","utils/image.js","utils/color.js","utils/draw.js","utils/polynomial.js","mutation/color.js","mutation/coefficients.js","mutation/index.js","approximation/evaluation.js","utils/sampling.js","approximation/index.js","index.jsx"],"names":["IMAGE_WIDTH","IMAGE_HEIGHT","fetchImageFromUrl","url","a","Jimp","read","image","resizedImage","resize","getBase64Async","MIME_PNG","console","log","x","y","hexColor","getPixelColor","Object","values","intToRGBA","src","getPixel","DISTANCE_NORMALIZING_RATIO","Math","sqrt","draw","canvas","polynomials","context","getContext","width","translateCanvasContext","clearCanvas","forEach","polynomial","color","getColorString","opacity","beginPath","fillStyle","moveTo","drawPolynomialAtCoordinate","evaluateAtX","lineTo","fill","drawPolynomial","translate","scale","BASE_COEFFICIENTS","DEFAULT_COLOR","Polynomial","this","coefficients","appliedMutations","prototype","result","coefficient","index","pow","COLOR_STEP_SIZE","colorMutations","name","isValid","r","execute","newValue","g","b","appliedMutatation","every","channel","COEFFICIENT_MUTATION_STEPS_BY_DEGREE","0","1","2","3","COEFFICIENT_LOWER_BOUNDS_BY_DEGREE","COEFFICIENT_UPPER_BOUNDS_BY_DEGREE","coefficientMutations","degree","appliedMutation","getAllMutants","currentPolynomial","fixedPolynomials","mutants","colorMutants","mutantPolynomials","mutation","mutant","cloneDeep","push","generateColorMutants","coefficientsMutants","mutatedPolynomial","generateCoefficientsMutants","mutantPolynomial","concat","NUMBER_OF_POINTS_TO_SAMPLE","round","evaluateMutants","baseImage","bestMutant","sampledPoints","n","xMax","yMax","Array","from","length","map","floor","random","sampleNRandomPoints","colorsInBaseImage","smallestDistance","Infinity","totalDistance","colorInMutation","reverse","evaluateOverlaidPolynomialsAtPoint","realColor","color1","color2","r1","g1","b1","r2","g2","b2","squared","distanceBetweenRGB","approximationRatio","isStopped","setCurrrentPolynomials","bestRatioAchieved","roundsWithoutProgress","bestAchievedState","current","Promise","resolve","setTimeout","BASE_IMAGE_URLS","ImageSelection","setBaseImageUrl","onClick","className","alt","Image","StartButton","started","setStarted","id","Canvas","canvasRef","ref","height","CurrentPolynomials","currentPolynomials","c","c0","c1","c2","c3","string","App","useState","setBaseImage","baseImageUrl","useRef","useEffect","fetchBaseImage","startApproximation","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.841d0836.chunk.js","sourcesContent":["export const IMAGE_WIDTH = 400;\nexport const IMAGE_HEIGHT = 200;\n","import Jimp from 'jimp';\nimport { IMAGE_WIDTH, IMAGE_HEIGHT } from '../constants';\n\nexport async function fetchImageFromUrl(url) {\n\tconst image = await Jimp.read(url);\n\n\tconst resizedImage = image.resize(IMAGE_WIDTH, IMAGE_HEIGHT);\n\n\treturn {\n\t\tsrc: await resizedImage.getBase64Async(Jimp.MIME_PNG),\n\t\tlog: () => console.log(image),\n\t\tgetPixel: (x, y) => {\n\t\t\tconst hexColor = image.getPixelColor(x, y);\n\n\t\t\treturn Object.values(Jimp.intToRGBA(hexColor));\n\t\t},\n\t};\n}\n","/* export function getGrayscaleColorString(color) {\n\treturn `rgb(${color}, ${color}, ${color}, ${1})`;\n}\n\nexport function grayScaleToRGB(color) {\n\treturn [color, color, color];\n} */\n\nexport function getColorString(color) {\n\treturn `rgb(${color[0]}, ${color[1]}, ${color[2]}, ${1})`;\n}\n\nconst DISTANCE_NORMALIZING_RATIO = Math.sqrt(3) * 255;\n\nexport function distanceBetweenRGB(color1, color2) {\n\tconst [r1, g1, b1] = color1;\n\tconst [r2, g2, b2] = color2;\n\n\tconst squared = (x) => x * x;\n\n\treturn (\n\t\tMath.sqrt(squared(r1 - r2) + squared(g1 - g2) + squared(b1 - b2)) /\n\t\tDISTANCE_NORMALIZING_RATIO\n\t); // Mabye remove square root?\n}\n\nexport function addRGBAColors(color1, color2) {\n\tconst [r1, g1, b1, a1] = color1;\n\tconst [r2, g2, b2, a2] = color2;\n\n\t// Overlay color 1 with color 2\n\t// The order matters!!\n\n\t// Based on this\n\t// https://stackoverflow.com/questions/18900598/how-to-combine-two-colors-with-varying-alpha-values\n\n\tconst a = (1 - a2) * a1 + a2;\n\n\tconst r = ((1 - a2) * a1 * r1 + a2 * r2) / a;\n\n\tconst g = ((1 - a2) * a1 * g1 + a2 * g2) / a;\n\n\tconst b = ((1 - a2) * a1 * b1 + a2 * b2) / a;\n\n\treturn [r, g, b, a];\n}\n\nexport function distanceBetweenColors(color1, color2) {\n\tlet [r1, g1, b1, a1] = color1;\n\tlet [r2, g2, b2, a2] = color2;\n\n\tr1 /= 255;\n\tg1 /= 255;\n\tb1 /= 255;\n\n\tr2 /= 255;\n\tg2 /= 255;\n\tb2 /= 255;\n\n\tconst squared = (x) => x * x;\n\n\treturn (\n\t\tMath.max(squared(r1 - r2), squared(r1 - r2 - a1 + a2)) +\n\t\tMath.max(squared(g1 - g2), squared(g1 - g2 - a1 + a2)) +\n\t\tMath.max(squared(b1 - b2), squared(b1 - b2 - a1 + a2))\n\t);\n}\n\nexport function distanceBetweenColors2(color1, color2) {\n\t// Based on\n\t// https://stackoverflow.com/a/47586402/12043472\n\n\tconst [r1, g1, b1, a1] = color1;\n\tconst [r2, g2, b2, a2] = color2;\n\n\tconst deltaR = r1 - r2;\n\tconst deltaG = g1 - g2;\n\tconst deltaB = b1 - b2;\n\n\tconst deltaAlpha = a1 - a2;\n\n\tconst rgbDistanceSquared =\n\t\t(deltaR * deltaR + deltaG * deltaG + deltaB * deltaB) / 3.0;\n\n\treturn (\n\t\t(deltaAlpha * deltaAlpha) / 2.0 +\n\t\t(rgbDistanceSquared * a1 * a2) / (255 * 255)\n\t);\n}\n","import { IMAGE_HEIGHT, IMAGE_WIDTH } from '../constants';\nimport { getColorString } from './color';\n\nexport default function draw(canvas, polynomials) {\n\tconst context = canvas.getContext('2d');\n\tclearCanvas(canvas);\n\n\tpolynomials.forEach((polynomial) => {\n\t\tdrawPolynomial(context, polynomial);\n\t});\n}\n\nfunction drawPolynomial(context, polynomial) {\n\tconst color = getColorString(polynomial.color, polynomial.opacity);\n\n\tcontext.beginPath();\n\tcontext.fillStyle = color;\n\n\tcontext.moveTo(-1000, 0);\n\n\tfor (let x = -(IMAGE_WIDTH / 2); x <= IMAGE_WIDTH / 2; x++) {\n\t\tconst y = polynomial.evaluateAtX(x);\n\n\t\tdrawPolynomialAtCoordinate(context, { x, y });\n\t}\n\n\tcontext.lineTo(IMAGE_WIDTH, 0);\n\tcontext.lineTo(-1000, 0);\n\n\tcontext.fill();\n\n\t// const pixels = context.getImageData(0, 0, 400, 200).data;\n\t// console.log(pixels);\n}\n\nfunction drawPolynomialAtCoordinate(context, { x, y }) {\n\tx += IMAGE_WIDTH / 2; // Translate to canvas coordinates\n\n\tcontext.lineTo(x, y);\n}\n\nfunction clearCanvas(canvas) {\n\t// eslint-disable-next-line\n\tcanvas.width = canvas.width;\n\n\ttranslateCanvasContext(canvas);\n\n\t// Mabye do it less hackily\n}\n\nexport function translateCanvasContext(canvas) {\n\tconst context = canvas.getContext('2d');\n\n\tcontext.translate(0, IMAGE_HEIGHT);\n\tcontext.scale(1, -1);\n}\n","const BASE_COEFFICIENTS = [100, 0.01, 0.0002, 0.000001];\nconst DEFAULT_COLOR = [200, 200, 200];\nexport function Polynomial(color = DEFAULT_COLOR) {\n\tthis.coefficients = BASE_COEFFICIENTS;\n\t// this.xLimits = [-200, 200];\n\tthis.color = color;\n\tthis.appliedMutations = [];\n}\n\nPolynomial.prototype.evaluateAtX = function (x) {\n\tlet result = 0;\n\n\t// x >= this.xLimits[0] &&\n\t// \tx <= this.xLimits[1] &&\n\tthis.coefficients.forEach((coefficient, index) => {\n\t\tresult += Math.pow(x, index) * coefficient;\n\t});\n\n\treturn result;\n};\n","import { cloneDeep } from 'lodash';\n\nconst COLOR_STEP_SIZE = 10;\n\nexport function generateColorMutants(polynomial) {\n\tlet mutantPolynomials = [];\n\n\tcolorMutations.forEach((mutation) => {\n\t\tconst [r, g, b] = polynomial.color;\n\t\tconst color = { r, g, b };\n\t\tif (mutation.isValid(color)) {\n\t\t\tconst { newValue, appliedMutatation } = mutation.execute(color);\n\n\t\t\tconst mutant = cloneDeep(polynomial);\n\n\t\t\tmutant.color = newValue;\n\t\t\tmutant.appliedMutations.push(appliedMutatation);\n\n\t\t\tmutantPolynomials.push(mutant);\n\t\t}\n\t});\n\n\treturn mutantPolynomials;\n}\n\nconst colorMutations = [\n\t/*\n    {\n\t\tname: string,\n\t\tisValid: () => boolean,\n\t\texecute: () => {\n\t\t\t\t        newValue,\n\t\t\t\t        appliedMutation: string\n\t\t            },\n    },\n    \n    */\n\n\t{\n\t\tname: 'decreaseRed',\n\t\tisValid: (color) => {\n\t\t\treturn color.r - COLOR_STEP_SIZE >= 0;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r - COLOR_STEP_SIZE, color.g, color.b],\n\t\t\t\tappliedMutatation: `decreased red by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'increaseRed',\n\t\tisValid: (color) => {\n\t\t\treturn color.r + COLOR_STEP_SIZE <= 255;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r + COLOR_STEP_SIZE, color.g, color.b],\n\t\t\t\tappliedMutatation: `increased red by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'decreaseGreen',\n\t\tisValid: (color) => {\n\t\t\treturn color.g - COLOR_STEP_SIZE >= 0;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, color.g - COLOR_STEP_SIZE, color.b],\n\t\t\t\tappliedMutatation: `decreased green by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'increaseGreen',\n\t\tisValid: (color) => {\n\t\t\treturn color.g + COLOR_STEP_SIZE <= 255;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, color.g + COLOR_STEP_SIZE, color.b],\n\t\t\t\tappliedMutatation: `increased green by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'decreaseBlue',\n\t\tisValid: (color) => {\n\t\t\treturn color.b - COLOR_STEP_SIZE >= 0;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, color.g, color.b - COLOR_STEP_SIZE],\n\t\t\t\tappliedMutatation: `decreased blue by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'increaseBlue',\n\t\tisValid: (color) => {\n\t\t\treturn color.b + COLOR_STEP_SIZE <= 255;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, color.g, color.b + COLOR_STEP_SIZE],\n\t\t\t\tappliedMutatation: `increased blue by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'darken',\n\t\tisValid: (color) => {\n\t\t\tconst { r, g, b } = color;\n\n\t\t\treturn [r, g, b].every((channel) => channel - COLOR_STEP_SIZE >= 0);\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [\n\t\t\t\t\tcolor.r - COLOR_STEP_SIZE,\n\t\t\t\t\tcolor.g - COLOR_STEP_SIZE,\n\t\t\t\t\tcolor.b - COLOR_STEP_SIZE,\n\t\t\t\t],\n\t\t\t\tappliedMutatation: `decreased all color channels by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'lighten',\n\t\tisValid: (color) => {\n\t\t\tconst { r, g, b } = color;\n\n\t\t\treturn [r, g, b].every((channel) => channel + COLOR_STEP_SIZE <= 255);\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [\n\t\t\t\t\tcolor.r + COLOR_STEP_SIZE,\n\t\t\t\t\tcolor.g + COLOR_STEP_SIZE,\n\t\t\t\t\tcolor.b + COLOR_STEP_SIZE,\n\t\t\t\t],\n\t\t\t\tappliedMutatation: `increased all color channels by ${COLOR_STEP_SIZE}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'invert color',\n\t\tisValid: () => {\n\t\t\treturn true;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [255 - color.r, 255 - color.g, 255 - color.b],\n\t\t\t\tappliedMutatation: `inverted all color channels`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'invert red channel',\n\t\tisValid: () => {\n\t\t\treturn true;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [255 - color.r, color.g, color.b],\n\t\t\t\tappliedMutatation: `inverted red channel`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'invert green channel',\n\t\tisValid: () => {\n\t\t\treturn true;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, 255 - color.g, color.b],\n\t\t\t\tappliedMutatation: `inverted green channel`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'invert blue channel',\n\t\tisValid: () => {\n\t\t\treturn true;\n\t\t},\n\t\texecute: (color) => {\n\t\t\treturn {\n\t\t\t\tnewValue: [color.r, color.g, 255 - color.b],\n\t\t\t\tappliedMutatation: `inverted blue channel`,\n\t\t\t};\n\t\t},\n\t},\n];\n","import { cloneDeep } from 'lodash';\n\nconst COEFFICIENT_MUTATION_STEPS_BY_DEGREE = {\n\t// How much to increase/decrease a coefficient of a specified degree in one step\n\t0: 10,\n\t1: 0.05,\n\t2: 0.0001,\n\t3: 0.0000005,\n};\n\nconst COEFFICIENT_LOWER_BOUNDS_BY_DEGREE = {\n\t0: 10,\n\t1: -10,\n\t2: -1,\n\t3: -0.005,\n};\n\nconst COEFFICIENT_UPPER_BOUNDS_BY_DEGREE = {\n\t0: 400,\n\t1: 10,\n\t2: 1,\n\t3: 0.005,\n};\n\nexport function generateCoefficientsMutants(polynomial) {\n\tconst { coefficients } = polynomial;\n\n\tlet mutantPolynomials = [];\n\n\tcoefficients.forEach((coefficient, index) => {\n\t\tconst degree = index;\n\n\t\tcoefficientMutations.forEach((mutation) => {\n\t\t\tif (mutation.isValid(coefficient, degree)) {\n\t\t\t\tconst { newValue, appliedMutation } = mutation.execute(\n\t\t\t\t\tcoefficient,\n\t\t\t\t\tdegree\n\t\t\t\t);\n\n\t\t\t\tconst mutatedPolynomial = cloneDeep(polynomial);\n\n\t\t\t\tmutatedPolynomial.coefficients[degree] = newValue;\n\t\t\t\tmutatedPolynomial.appliedMutations.push(appliedMutation);\n\n\t\t\t\tmutantPolynomials.push(mutatedPolynomial);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn mutantPolynomials;\n}\n\nconst coefficientMutations = [\n\t{\n\t\tname: 'increase coefficient',\n\t\tisValid: (coefficient, degree) => {\n\t\t\tconst UPPER_BOUND = COEFFICIENT_UPPER_BOUNDS_BY_DEGREE[degree];\n\n\t\t\tconst STEP_SIZE = COEFFICIENT_MUTATION_STEPS_BY_DEGREE[degree];\n\n\t\t\treturn coefficient + STEP_SIZE <= UPPER_BOUND;\n\t\t},\n\t\texecute: (coefficient, degree) => {\n\t\t\tconst newValue =\n\t\t\t\tcoefficient + COEFFICIENT_MUTATION_STEPS_BY_DEGREE[degree];\n\n\t\t\treturn {\n\t\t\t\tnewValue,\n\t\t\t\tappliedMutation: `increased coefficient of x ** ${degree} to ${newValue}`,\n\t\t\t};\n\t\t},\n\t},\n\t{\n\t\tname: 'decrease coefficient',\n\t\tisValid: (coefficient, degree) => {\n\t\t\tconst LOWER_BOUND = COEFFICIENT_LOWER_BOUNDS_BY_DEGREE[degree];\n\n\t\t\tconst STEP_SIZE = COEFFICIENT_MUTATION_STEPS_BY_DEGREE[degree];\n\n\t\t\treturn coefficient - STEP_SIZE >= LOWER_BOUND;\n\t\t},\n\t\texecute: (coefficient, degree) => {\n\t\t\tconst newValue =\n\t\t\t\tcoefficient - COEFFICIENT_MUTATION_STEPS_BY_DEGREE[degree];\n\n\t\t\treturn {\n\t\t\t\tnewValue,\n\t\t\t\tappliedMutation: `decreased coefficient of x ** ${degree} to ${newValue}`,\n\t\t\t};\n\t\t},\n\t},\n\t/* \t{\n\t\tname: 'flip coefficient',\n\t\tisValid: (coefficient, degree) => {\n\t\t\treturn true;\n\t\t},\n\t\texecute: (coefficient, degree) => {\n\t\t\tconst newValue = -coefficient;\n\n\t\t\treturn {\n\t\t\t\tnewValue,\n\t\t\t\tappliedMutation: `flipped coefficient of x ** ${degree} to ${newValue}`,\n\t\t\t};\n\t\t},\n\t}, */\n\n\t// flip sign of coefficient?\n];\n","import { generateColorMutants } from './color';\nimport { generateCoefficientsMutants } from './coefficients';\nimport { generateLimitsMutants } from './limits';\n\nexport function getAllMutants(currentPolynomial, fixedPolynomials) {\n\tlet mutants = [];\n\n\tconst colorMutants = generateColorMutants(currentPolynomial);\n\tconst coefficientsMutants = generateCoefficientsMutants(currentPolynomial);\n\t// const limitsMutants = generateLimitsMutants(currentPolynomial);\n\n\t[...colorMutants, ...coefficientsMutants /* , ...limitsMutants */].forEach(\n\t\t(mutantPolynomial) => {\n\t\t\t// Add the mutated polynomial to existing polynomials\n\t\t\tmutants.push(fixedPolynomials.concat(mutantPolynomial));\n\t\t}\n\t);\n\n\t// mutants.push(fixedPolynomials.concat(currentPolynomial)); // Add the current state as well\n\n\treturn mutants;\n}\n","import { sampleNRandomPoints } from '../utils/sampling';\nimport { IMAGE_WIDTH, IMAGE_HEIGHT } from '../constants';\nimport { distanceBetweenRGB } from '../utils/color';\n\nconst PERCENT_OF_POINTS_TO_SAMPLE = 5;\n\nconst NUMBER_OF_POINTS_TO_SAMPLE = Math.round(\n\tIMAGE_WIDTH * IMAGE_HEIGHT * (PERCENT_OF_POINTS_TO_SAMPLE / 100)\n);\n\nexport function evaluateMutants(mutants, baseImage) {\n\tlet sampledPoints = sampleNRandomPoints(NUMBER_OF_POINTS_TO_SAMPLE, {\n\t\txMax: IMAGE_WIDTH,\n\t\tyMax: IMAGE_HEIGHT,\n\t});\n\n\tconst colorsInBaseImage = sampledPoints.map(([x, y]) =>\n\t\tbaseImage.getPixel(x, IMAGE_HEIGHT - y)\n\t);\n\n\tlet bestMutant;\n\tlet smallestDistance = Infinity;\n\n\tsampledPoints = sampledPoints.map(([x, y]) => [x - 200, y]);\n\n\tmutants.forEach((mutant) => {\n\t\tlet totalDistance = 0;\n\n\t\tsampledPoints.forEach(([x, y], index) => {\n\t\t\tconst colorInMutation = evaluateOverlaidPolynomialsAtPoint(mutant, {\n\t\t\t\tx,\n\t\t\t\ty,\n\t\t\t});\n\n\t\t\tconst realColor = colorsInBaseImage[index];\n\n\t\t\ttotalDistance += y ** 10 * distanceBetweenRGB(realColor, colorInMutation);\n\t\t});\n\n\t\ttotalDistance /= sampledPoints.length;\n\n\t\tif (totalDistance < smallestDistance) {\n\t\t\tbestMutant = mutant;\n\t\t\tsmallestDistance = totalDistance;\n\t\t}\n\t});\n\n\treturn { bestMutant, approximationRatio: smallestDistance };\n}\n\nfunction evaluateOverlaidPolynomialsAtPoint(polynomials, { x, y }) {\n\tfor (const polynomial of polynomials.reverse()) {\n\t\tconst value = polynomial.evaluateAtX(x);\n\t\tif (value >= y) {\n\t\t\t// We have found the foremost polynomiual that colors this point\n\t\t\treturn polynomial.color;\n\t\t}\n\t}\n\n\treturn [255, 255, 255];\n}\n","export function sampleNRandomPoints(n, { xMax, yMax }) {\n  return Array.from({ length: n }).map(() => [\n    Math.floor(Math.random() * xMax),\n    Math.floor(Math.random() * yMax),\n  ]);\n}\n","import draw from '../utils/draw';\nimport { Polynomial } from '../utils/polynomial';\nimport { getAllMutants } from '../mutation';\nimport { evaluateMutants } from './evaluation';\nimport { cloneDeep } from 'lodash';\n\nconst ROUNDS_WITHOUT_PROGRESS_THRESHOLD = 20;\n\nconst MAX_POLYNOMES = 15;\n\nexport async function startApproximation(\n\tbaseImage,\n\tcanvas,\n\tisStopped,\n\tsetCurrrentPolynomials\n) {\n\tlet fixedPolynomials = [];\n\n\tlet currentPolynomial = new Polynomial();\n\n\tlet bestRatioAchieved = Infinity;\n\tlet roundsWithoutProgress = 0;\n\tlet bestAchievedState = null;\n\n\twhile (!isStopped.current) {\n\t\tconst mutants = getAllMutants(currentPolynomial, fixedPolynomials);\n\n\t\tconst { bestMutant, approximationRatio } = evaluateMutants(\n\t\t\tmutants,\n\t\t\tbaseImage\n\t\t);\n\n\t\tcurrentPolynomial = bestMutant[bestMutant.length - 1];\n\n\t\tif (approximationRatio < bestRatioAchieved) {\n\t\t\tbestRatioAchieved = approximationRatio;\n\t\t\troundsWithoutProgress = 0;\n\t\t\tbestAchievedState = cloneDeep(bestMutant);\n\t\t} else {\n\t\t\troundsWithoutProgress++;\n\n\t\t\tif (roundsWithoutProgress === ROUNDS_WITHOUT_PROGRESS_THRESHOLD) {\n\t\t\t\tconsole.log('The final polynome:', currentPolynomial);\n\n\t\t\t\tif (fixedPolynomials.length >= MAX_POLYNOMES) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Persist current polynomial, start mutating new one\n\t\t\t\tfixedPolynomials = cloneDeep(bestAchievedState);\n\t\t\t\tconsole.log('Current polynomial count: ', fixedPolynomials.length);\n\n\t\t\t\tconsole.log('Adding a new polynomial');\n\t\t\t\tcurrentPolynomial = new Polynomial();\n\n\t\t\t\t// Reset count\n\t\t\t\troundsWithoutProgress = 0;\n\t\t\t\tbestRatioAchieved = Infinity;\n\t\t\t}\n\t\t}\n\n\t\tsetCurrrentPolynomials(cloneDeep(bestMutant));\n\n\t\tdraw(canvas, bestMutant);\n\n\t\tawait new Promise((resolve) => setTimeout(resolve, 20));\n\t}\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport ReactDom from 'react-dom';\n\nimport './style.css';\n\nimport { fetchImageFromUrl } from './utils/image';\nimport { translateCanvasContext } from './utils/draw';\nimport { startApproximation } from './approximation';\nimport { IMAGE_WIDTH, IMAGE_HEIGHT } from './constants';\n\nconst BASE_IMAGE_URLS = [\n\t'https://media-cdn.tripadvisor.com/media/photo-s/14/3e/a6/7b/beach.jpg',\n\t'https://i.imgur.com/8tDpnVL.png',\n\t'https://i.imgur.com/K82aewd.png',\n\t'https://ichef.bbci.co.uk/news/976/cpsprodpb/40F0/production/_104642661_3112ae2e-7f5b-4c8d-9fd0-a4bebcb372af.jpg',\n\t'https://i.imgur.com/0xJ3awl.png',\n\t'https://i.imgur.com/jZSOn8N.png',\n];\n\nfunction ImageSelection({ setBaseImageUrl }) {\n\treturn (\n\t\t<div>\n\t\t\t{BASE_IMAGE_URLS.map((url) => (\n\t\t\t\t<img\n\t\t\t\t\tonClick={() => setBaseImageUrl(url)}\n\t\t\t\t\tclassName={'selectionImage'}\n\t\t\t\t\talt=''\n\t\t\t\t\tsrc={url}\n\t\t\t\t\tkey={url}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nfunction Image({ src }) {\n\treturn <img className={'baseimage'} src={src} alt='' />;\n}\n\nfunction StartButton({ started, setStarted }) {\n\treturn (\n\t\t<button id={'startButton'} onClick={() => setStarted(!started)}>\n\t\t\t{started ? 'stop' : 'start'}\n\t\t</button>\n\t);\n}\n\nfunction Canvas({ canvasRef }) {\n\treturn <canvas ref={canvasRef} width={IMAGE_WIDTH} height={IMAGE_HEIGHT} />;\n}\n\nfunction CurrentPolynomials({ currentPolynomials }) {\n\treturn (\n\t\t<div className={'polynomialTexts'}>\n\t\t\t{currentPolynomials.reverse().map((polynomial, index) => {\n\t\t\t\tconst [c0, c1, c2, c3] = polynomial.coefficients.map(\n\t\t\t\t\t(c) => Math.round(c * 1000000) / 1000000\n\t\t\t\t);\n\t\t\t\tconst string = `${c0} + ${c1}x ${c2 > 0 ? '+ ' + c2 + 'x²' : ''}  ${\n\t\t\t\t\tc3 > 0 ? '+ ' + c2 + 'x³' : ''\n\t\t\t\t}`;\n\n\t\t\t\treturn <div key={string + index}>{string}</div>;\n\t\t\t})}\n\t\t</div>\n\t);\n}\n\nfunction App() {\n\tconst [started, setStarted] = useState(false);\n\n\tconst [baseImage, setBaseImage] = useState(null);\n\n\tconst [baseImageUrl, setBaseImageUrl] = useState(null);\n\n\tconst [currentPolynomials, setCurrrentPolynomials] = useState(null);\n\t/* \n    image type = {\n        src: object,                       The image file to pass into the <img> element\n        log: () => void,                   Helper method to log the image\n        getPixel: (x, y) => { r, g, b, a}  Returns {r, g, b, a} of the pixel at specified coordinates (x, y)\n    }\n    */\n\n\tconst canvasRef = useRef(null);\n\tconst canvas = canvasRef.current;\n\n\tconst isStopped = useRef(true);\n\n\tuseEffect(() => {\n\t\tasync function fetchBaseImage() {\n\t\t\tsetBaseImage(await fetchImageFromUrl(baseImageUrl)); // Load the default image\n\t\t}\n\t\tif (baseImageUrl) {\n\t\t\tisStopped.current = true;\n\t\t\tsetStarted(false);\n\t\t\tfetchBaseImage(baseImageUrl);\n\t\t}\n\t}, [baseImageUrl]);\n\n\tuseEffect(() => {\n\t\tif (canvasRef.current) {\n\t\t\ttranslateCanvasContext(canvasRef.current);\n\t\t}\n\t}, [canvasRef]);\n\n\tuseEffect(() => {\n\t\tisStopped.current = !started;\n\n\t\tif (started && baseImage) {\n\t\t\tstartApproximation(baseImage, canvas, isStopped, setCurrrentPolynomials); // start the approximation if start button clicked (or new image selected)\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [started, baseImage]);\n\n\treturn (\n\t\t<>\n\t\t\t<span className={'helptext'}>Pick an image to approximate</span>\n\t\t\t<ImageSelection setBaseImageUrl={setBaseImageUrl} />\n\t\t\t<Image src={baseImage?.src} />\n\t\t\t{baseImage && <StartButton started={started} setStarted={setStarted} />}\n\t\t\t<Canvas canvasRef={canvasRef} />\n\t\t\t{currentPolynomials && (\n\t\t\t\t<CurrentPolynomials currentPolynomials={currentPolynomials} />\n\t\t\t)}\n\t\t</>\n\t);\n}\n\nReactDom.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}